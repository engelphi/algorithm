sudo: required
language: cpp
dist: trusty
branches:
  only:
  - master
services:
- docker
env:
  global:
  - ci_env=`(curl -s https://codecov.io/env) | bash`
  - GIT_BRANCH=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then echo $TRAVIS_BRANCH;
    else echo $TRAVIS_PULL_REQUEST_BRANCH; fi)
jobs:
  include:
    - stage: pull docker build image
      script: 'docker pull engelphi/docker-cpp-image'
    - stage: code Linting
      script:
      - export STEP="FORMAT_CHECK"
      - docker run $ci_env -e BRANCH=$GIT_BRANCH -itd --name $STEP engelphi/docker-cpp-image
      - docker exec $STEP git clone https://github.com/engelphi/algorithm.git
      - docker exec $STEP sh -c 'cd algorithm && git checkout origin/$BRANCH'
      - docker exec $STEP sh -c 'cd algorithm && mkdir build && cd build && cmake .. -DCMAKE_CXX_COMPILER=clang++ -DENABLE_CLANG_FORMAT=ON'
      - docker exec $STEP sh -c 'cd algorithm/build && make format'
      - docker exec $STEP bash -c 'cd algorithm && rm -r build && [ $(git diff --shortstat | wc -l) == 0 ] && echo "success"'
      - docker rm -f $STEP
      - script:
        - export STEP="DOCUMENTATION_CHECK"
        - docker run $ci_env -e BRANCH=$GIT_BRANCH -itd --name $STEP engelphi/docker-cpp-image
        - docker exec $STEP git clone https://github.com/engelphi/algorithm.git
        - docker exec $STEP sh -c 'cd algorithm && git checkout origin/$BRANCH'
        - docker exec $STEP sh -c 'cd algorithm && ls -ahl && doxygen'
        - docker rm -f $STEP
      - script:
        - export STEP="CLANG_TIDY_CHECK"
        - docker run $ci_env -e BRANCH=$GIT_BRANCH -itd --name $STEP engelphi/docker-cpp-image
        - docker exec $STEP git clone https://github.com/engelphi/algorithm.git
        - docker exec $STEP sh -c 'cd algorithm && git checkout origin/$BRANCH'
        - docker exec $STEP sh -c 'cd algorithm && mkdir build && cd build && cmake .. -DCMAKE_CXX_COMPILER=clang++ -DENABLE_CLANG_TIDY=ON'
        - docker exec $STEP sh -c 'cd algorithm/build && make tidy'
        - docker rm -f $STEP
      - script:
        - export STEP="CPPCHECK"
        - docker run $ci_env -e BRANCH=$GIT_BRANCH -itd --name $STEP engelphi/docker-cpp-image
        - docker exec $STEP git clone https://github.com/engelphi/algorithm.git
        - docker exec $STEP sh -c 'cd algorithm && git checkout origin/$BRANCH'
        - docker exec $STEP sh -c 'cd algorithm && mkdir build && cd build && cmake .. -DCMAKE_CXX_COMPILER=clang++ -DENABLE_CPP_CHECK=ON'
        - docker exec $STEP sh -c 'cd algorithm/build && make cppcheck'
        - docker rm -f $STEP
    - stage: Dynamic Analysis
      script:
      - export STEP="ADDRESS_SANITIZER"
      - docker run $ci_env -e BRANCH=$GIT_BRANCH -itd --name $STEP engelphi/docker-cpp-image
      - docker exec $STEP git clone https://github.com/engelphi/algorithm.git
      - docker exec $STEP sh -c 'cd algorithm && git checkout origin/$BRANCH'
      - docker exec $STEP sh -c 'cd algorithm && mkdir build && cd build && cmake .. -DCMAKE_CXX_COMPILER=clang++ -DENABLE_ASAN=ON'
      - docker exec $STEP sh -c 'cd algorithm/build && make'
      - docker exec $STEP sh -c 'cd algorithm/build && ASAN_OPTIONS=check_initialization_order=1:detect_leaks=1 ./test-algorithm'
      - docker rm -f $STEP
    - stage: Test
      script: 
      - export STEP="COVERAGE"
      - docker run $ci_env -e BRANCH=$GIT_BRANCH -itd --name $STEP engelphi/docker-cpp-image
      - docker exec $STEP git clone https://github.com/engelphi/algorithm.git
      - docker exec $STEP sh -c 'cd algorithm && git checkout origin/$BRANCH'
      - docker exec $STEP sh -c 'cd algorithm && mkdir build && cd build && cmake .. -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE=ON'
      - docker exec $STEP sh -c 'cd algorithm/build && make algorithm_coverage'
      - docker exec $STEP sh -c 'cd algorithm/build && $(curl -s https://codecov.io/bash > codecov.sh) && chmod +x codecov.sh && ./codecov.sh -X gcov -s coverage -f lcov.info.cleaned || echo "Codecov did not collect coverage reports"'
      - docker rm -f $STEP
      - script:
        - export STEP="TEST_CLANG"
        - docker run $ci_env -e BRANCH=$GIT_BRANCH -itd --name $STEP engelphi/docker-cpp-image
        - docker exec $STEP git clone https://github.com/engelphi/algorithm.git
        - docker exec $STEP sh -c 'cd algorithm && git checkout origin/$BRANCH'
        - docker exec $STEP sh -c 'cd algorithm && mkdir build && cd build && cmake .. -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release'
        - docker exec $STEP sh -c 'cd algorithm/build && make'
        - docker exec $STEP sh -c 'cd algorithm/build && ./test-algorithm'
        - docker rm -f $STEP
      - script:
        - export STEP="TEST_GCC"
        - docker run $ci_env -e BRANCH=$GIT_BRANCH -itd --name $STEP engelphi/docker-cpp-image
        - docker exec $STEP git clone https://github.com/engelphi/algorithm.git
        - docker exec $STEP sh -c 'cd algorithm && git checkout origin/$BRANCH'
        - docker exec $STEP sh -c 'cd algorithm && mkdir build && cd build && cmake .. -DCMAKE_CXX_COMPILER=g++ -DCMAKE_BUILD_TYPE=Release'
        - docker exec $STEP sh -c 'cd algorithm/build && make'
        - docker exec $STEP sh -c 'cd algorithm/build && ./test-algorithm'
        - docker rm -f $STEP
