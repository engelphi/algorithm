sudo: required
language: cpp
dist: trusty
branches:
  only:
    - master
services:
  - docker
before_script:
  - docker pull engelphi/docker-cpp-image:latest
env:
  global:
    - ci_env=`(curl -s https://codecov.io/env) | bash`
    - GIT_BRANCH=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then echo $TRAVIS_BRANCH; else echo $TRAVIS_PULL_REQUEST_BRANCH; fi)

matrix:
  include:
  # format
  - os: linux
    env: STEP=FORMAT_CHECK
    script:
    - docker run $ci_env -e BRANCH=$GIT_BRANCH -itd --name build engelphi/docker-cpp-image
    - docker exec build git clone https://github.com/engelphi/algorithm.git
    - docker exec build sh -c 'cd algorithm && git checkout origin/$BRANCH'
    - docker exec build sh -c 'cd algorithm && mkdir build && cd build && cmake .. -DCMAKE_CXX_COMPILER=clang++ -DENABLE_CLANG_FORMAT=ON'
    - docker exec build sh -c 'cd algorithm/build && make format'
    - docker exec build bash -c 'cd algorithm && rm -r build && [ $(git diff --shortstat | wc -l) == 0 ] && echo "success"'
  # documentation
  - os: linux
    env: STEP=DOCUMENTATION_CHECK
    script:
    - docker run $ci_env -e BRANCH=$GIT_BRANCH -itd --name build engelphi/docker-cpp-image
    - docker exec build git clone https://github.com/engelphi/algorithm.git
    - docker exec build sh -c 'cd algorithm && git checkout origin/$BRANCH'
    - docker exec build sh -c 'cd algorithm && ls -ahl && doxygen'
  # static analysis
  - os: linux
    env: STEP=CLANG_TIDY
    script:
    - docker run $ci_env -e BRANCH=$GIT_BRANCH -itd --name build engelphi/docker-cpp-image
    - docker exec build git clone https://github.com/engelphi/algorithm.git
    - docker exec build sh -c 'cd algorithm && git checkout origin/$BRANCH'
    - docker exec build sh -c 'cd algorithm && mkdir build && cd build && cmake .. -DCMAKE_CXX_COMPILER=clang++ -DENABLE_CLANG_TIDY=ON'
    - docker exec build sh -c 'cd algorithm/build && make tidy'
  - os: linux
    env: STEP=CPPCHECK
    script:
    - docker run $ci_env -e BRANCH=$GIT_BRANCH -itd --name build engelphi/docker-cpp-image
    - docker exec build git clone https://github.com/engelphi/algorithm.git
    - docker exec build sh -c 'cd algorithm && git checkout origin/$BRANCH'
    - docker exec build sh -c 'cd algorithm && mkdir build && cd build && cmake .. -DCMAKE_CXX_COMPILER=clang++ -DENABLE_CPP_CHECK=ON'
    - docker exec build sh -c 'cd algorithm/build && make cppcheck'
  # address sanitizer
  - os: linux
    env: STEP=ADDRESS_SANITIZER
    script:
    - docker run $ci_env -e BRANCH=$GIT_BRANCH -itd --name build engelphi/docker-cpp-image
    - docker exec build git clone https://github.com/engelphi/algorithm.git
    - docker exec build sh -c 'cd algorithm && git checkout origin/$BRANCH'
    - docker exec build sh -c 'cd algorithm && mkdir build && cd build && cmake .. -DCMAKE_CXX_COMPILER=clang++ -DENABLE_ASAN=ON'
    - docker exec build sh -c 'cd algorithm/build && make'
    - docker exec build sh -c 'cd algorithm/build && ASAN_OPTIONS=check_initialization_order=1 ./test-algorithm'
  # memory sanitizer
  #- os: linux
  #  env: STEP=MEMORY_SANITIZER
  #  script:
  #  - docker run $ci_env -itd --name build engelphi/docker-cpp-image
  #  - docker exec build git clone https://github.com/engelphi/algorithm.git
  #  - docker exec build sh -c 'cd algorithm && mkdir build && cd build && cmake .. -DCMAKE_CXX_COMPILER=clang++ -DENABLE_MSAN=ON'
  #  - docker exec build sh -c 'cd algorithm/build && make'
  #  - docker exec build sh -c 'cd algorithm/build && ./test-algorithm'
  # test coverage
  - os: linux
    env: STEP=COVERAGE
    script:
    - docker run $ci_env -e BRANCH=$GIT_BRANCH -itd --name build engelphi/docker-cpp-image
    - docker exec build git clone https://github.com/engelphi/algorithm.git
    - docker exec build sh -c 'cd algorithm && git checkout origin/$BRANCH'
    - docker exec build sh -c 'cd algorithm && mkdir build && cd build && cmake .. -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE=ON'
    - docker exec build sh -c 'cd algorithm/build && make algorithm_coverage'
    - docker exec build sh -c 'cd algorithm/build && $(curl -s https://codecov.io/bash > codecov.sh) && chmod +x codecov.sh && ./codecov.sh -X gcov -s coverage -f lcov.info.cleaned || echo "Codecov did not collect coverage reports"'
  # regular build
  - os: linux
    env: STEP=TEST
    script:
    - docker run $ci_env -e BRANCH=$GIT_BRANCH -itd --name build engelphi/docker-cpp-image
    - docker exec build git clone https://github.com/engelphi/algorithm.git
    - docker exec build sh -c 'cd algorithm && git checkout origin/$BRANCH'
    - docker exec build sh -c 'cd algorithm && mkdir build && cd build && cmake .. -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_BUILD_TYPE=Release'
    - docker exec build sh -c 'cd algorithm/build && make'
    - docker exec build sh -c 'cd algorithm/build && ./test-algorithm'
